#Preprocessing script by - Ruveen Jayasinghe 104317649
# This script preprocesses the data generated by the mock_data_generator.py script.
# It flattens the JSON data, encodes categorical features and scales numerical features

#-------!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-------------------

#SUGGESTION : Dont use this straight away, use this logic in your own ML PIPELINE so that when you run the ML pipeline, it will automatically preprocess the data for you.
#             This will help simplify the process of running the ML pipeline automatically at a given time interval.

#-------!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-------------------


import json
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler, FunctionTransformer
from sklearn.pipeline import Pipeline

# Load the JSON data from the file generated from the mock_data_generator.py script
with open("../data/restaurant_0002_2YEAR_data.json", "r") as f:
    raw_data = json.load(f)


#Flatten the JSON data for each restaurant into a DataFrame
flat_data = []
for doc in raw_data:
    for hour in doc["hourly_data"]:
        flat_data.append({
            "hour": hour["hour"],
            "day_of_week": hour["day_of_week"],
            "check_in_count": hour["check_in_count"],
            "total_customers": hour["total_customers"],
            "closing_time": hour["closing_time"],
            "google_rating": hour["google_rating"],
            "review_sentiment_score": hour["review_sentiment_score"],
            "categories": ", ".join(hour["categories"]),
            "weather": hour["weather"],
            "temperature": hour["temperature"],
            "local_events": ", ".join(hour["local_events"]) if hour["local_events"] else "None",
            "holiday": int(hour["holiday"]),
            "distance_to_cbd_km": doc["location"]["distance_to_cbd_km"],
            "total_seats": doc["total_seats"],
            "reservations": hour["reservations"],
            "average_bill_price": hour["average_bill_price"]
        })

df = pd.DataFrame(flat_data) #dataframe

# categorical, numerical, and binary features encoded
categorical_features = ["day_of_week", "categories", "weather", "local_events"]
numerical_features = [
    "hour", "check_in_count", "closing_time", "google_rating",
    "review_sentiment_score", "temperature", "distance_to_cbd_km",
    "total_seats", "reservations", "average_bill_price"
]
binary_features = ["holiday"]

preprocessor = ColumnTransformer(transformers=[
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features),
    ("num", StandardScaler(), numerical_features),
    ("bin", FunctionTransformer(lambda x: x), binary_features)
])

X = df[categorical_features + numerical_features + binary_features]
y = df["total_customers"]


X_preprocessed = preprocessor.fit_transform(X)


print(" Preprocessing Complete")
print(" X shape:", X_preprocessed.shape)
print(" y shape:", y.shape)
print("\n Sample of Raw Data:")
print(df.head())
